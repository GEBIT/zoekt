// Copyright 2016 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package zoekt // import "github.com/sourcegraph/zoekt"

import (
	"bytes"
	"encoding/gob"
	"fmt"
	"math/rand"
	"reflect"
	"testing"
	"testing/quick"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	v1 "github.com/sourcegraph/zoekt/grpc/v1"
	"google.golang.org/protobuf/proto"
)

func TestProtoRoundtrip(t *testing.T) {
	t.Run("FileMatch", func(t *testing.T) {
		f := func(f1 FileMatch) bool {
			p1 := f1.ToProto()
			f2 := FileMatchFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("ChunkMatch", func(t *testing.T) {
		f := func(f1 ChunkMatch) bool {
			p1 := f1.ToProto()
			f2 := ChunkMatchFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Range", func(t *testing.T) {
		f := func(f1 Range) bool {
			p1 := f1.ToProto()
			f2 := RangeFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Location", func(t *testing.T) {
		f := func(f1 Range) bool {
			p1 := f1.ToProto()
			f2 := RangeFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("LineMatch", func(t *testing.T) {
		f := func(f1 LineMatch) bool {
			p1 := f1.ToProto()
			f2 := LineMatchFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Symbol", func(t *testing.T) {
		f := func(f1 *Symbol) bool {
			p1 := f1.ToProto()
			f2 := SymbolFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("FlushReson", func(t *testing.T) {
		f := func(f1 FlushReason) bool {
			p1 := f1.ToProto()
			f2 := FlushReasonFromProto(p1)
			return reflect.DeepEqual(f1.String(), f2.String())
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Stats", func(t *testing.T) {
		f := func(f1 Stats) bool {
			p1 := f1.ToProto()
			f2 := StatsFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Progress", func(t *testing.T) {
		f := func(f1 Progress) bool {
			p1 := f1.ToProto()
			f2 := ProgressFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("SearchResult", func(t *testing.T) {
		f := func(f1 *SearchResult) bool {
			p1 := f1.ToProto()
			f2 := SearchResultFromProto(p1)
			return reflect.DeepEqual(f1, f2)
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("Repository", func(t *testing.T) {
		f := func(f1 *Repository) bool {
			p1 := f1.ToProto()
			f2 := RepositoryFromProto(p1)
			if diff := cmp.Diff(f1, &f2, cmpopts.IgnoreUnexported(Repository{})); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("IndexMetadata", func(t *testing.T) {
		f := func(f1 *IndexMetadata) bool {
			p1 := f1.ToProto()
			f2 := IndexMetadataFromProto(p1)
			if diff := cmp.Diff(f1, &f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("RepoStats", func(t *testing.T) {
		f := func(f1 RepoStats) bool {
			p1 := f1.ToProto()
			f2 := RepoStatsFromProto(p1)
			if diff := cmp.Diff(f1, f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	// t.Run("RepoListEntry", func(t *testing.T) {
	// 	f := func(f1 *RepoListEntry) bool {
	// 		p1 := f1.ToProto()
	// 		f2 := RepoListEntryFromProto(p1)
	// 		if diff := cmp.Diff(f1, f2); diff != "" {
	// 			fmt.Printf("got diff: %s", diff)
	// 			return false
	// 		}
	// 		return true
	// 	}
	// 	if err := quick.Check(f, nil); err != nil {
	// 		t.Fatal(err)
	// 	}
	// })
	//
	t.Run("RepositoryBranch", func(t *testing.T) {
		f := func(f1 RepositoryBranch) bool {
			p1 := f1.ToProto()
			f2 := RepositoryBranchFromProto(p1)
			if diff := cmp.Diff(f1, f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("MinimalRepoListEntry", func(t *testing.T) {
		f := func(f1 MinimalRepoListEntry) bool {
			p1 := f1.ToProto()
			f2 := MinimalRepoListEntryFromProto(p1)
			if diff := cmp.Diff(f1, f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("ListOptions", func(t *testing.T) {
		f := func(f1 *ListOptions) bool {
			if f1 != nil {
				f1.Minimal = false
			}
			p1 := f1.ToProto()
			f2 := ListOptionsFromProto(p1)
			if diff := cmp.Diff(f1, f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})

	t.Run("SearchOptions", func(t *testing.T) {
		f := func(f1 *SearchOptions) bool {
			if f1 != nil {
				// Ignore deprecated and unimplemented fields
				f1.ShardMaxImportantMatch = 0
				f1.TotalMaxImportantMatch = 0
				f1.SpanContext = nil
			}
			p1 := f1.ToProto()
			f2 := SearchOptionsFromProto(p1)
			if diff := cmp.Diff(f1, f2); diff != "" {
				fmt.Printf("got diff: %s", diff)
				return false
			}
			return true
		}
		if err := quick.Check(f, nil); err != nil {
			t.Fatal(err)
		}
	})
}

func (*IndexMetadata) Generate(r *rand.Rand, size int) reflect.Value {
	indexTime := time.Now().Add(time.Duration(r.Int63n(1000)) * time.Hour)
	var i IndexMetadata
	i.IndexFormatVersion = gen(i.IndexFormatVersion, r)
	i.IndexFeatureVersion = gen(i.IndexFeatureVersion, r)
	i.IndexMinReaderVersion = gen(i.IndexMinReaderVersion, r)
	i.IndexTime = indexTime
	i.PlainASCII = gen(i.PlainASCII, r)
	i.LanguageMap = gen(i.LanguageMap, r)
	i.ZoektVersion = gen(i.ZoektVersion, r)
	i.ID = gen(i.ID, r)
	return reflect.ValueOf(&i)
}

func (*Repository) Generate(rng *rand.Rand, size int) reflect.Value {
	latestCommitDate := time.Now().Add(time.Duration(rng.Int63n(1000)) * time.Hour)
	var r Repository
	v := &Repository{
		ID:                   gen(r.ID, rng),
		Name:                 gen(r.Name, rng),
		URL:                  gen(r.URL, rng),
		Source:               gen(r.Source, rng),
		Branches:             gen(r.Branches, rng),
		SubRepoMap:           map[string]*Repository{},
		CommitURLTemplate:    gen(r.CommitURLTemplate, rng),
		FileURLTemplate:      gen(r.FileURLTemplate, rng),
		LineFragmentTemplate: gen(r.LineFragmentTemplate, rng),
		priority:             gen(r.priority, rng),
		RawConfig:            gen(r.RawConfig, rng),
		Rank:                 gen(r.Rank, rng),
		IndexOptions:         gen(r.IndexOptions, rng),
		HasSymbols:           gen(r.HasSymbols, rng),
		Tombstone:            gen(r.Tombstone, rng),
		LatestCommitDate:     latestCommitDate,
		FileTombstones:       gen(r.FileTombstones, rng),
	}
	return reflect.ValueOf(v)
}

func (RepoListField) Generate(rng *rand.Rand, size int) reflect.Value {
	switch rng.Int() % 3 {
	case 0:
		return reflect.ValueOf(RepoListField(RepoListFieldRepos))
	case 1:
		return reflect.ValueOf(RepoListField(RepoListFieldMinimal))
	default:
		return reflect.ValueOf(RepoListField(RepoListFieldReposMap))
	}
}

func gen[T any](sample T, r *rand.Rand) T {
	var t T
	v, _ := quick.Value(reflect.TypeOf(t), r)
	return v.Interface().(T)
}

var exampleSearchResult = &SearchResult{Stats: Stats{ContentBytesLoaded: 873061, IndexBytesLoaded: 4827, Crashes: 0, Duration: 0, FileCount: 17, ShardFilesConsidered: 0, FilesConsidered: 18, FilesLoaded: 18, FilesSkipped: 0, ShardsScanned: 1, ShardsSkipped: 0, ShardsSkippedFilter: 0, MatchCount: 22, NgramMatches: 24, Wait: 0, RegexpsConsidered: 0, FlushReason: 0x0}, Progress: Progress{Priority: 24620, MaxPendingPriority: 5741}, Files: []FileMatch{FileMatch{Score: 6283.298078885654, Debug: "", FileName: "clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerUnsecuredLoginCallbackHandlerTest.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x28, 0x29, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x49, 0x4f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b}, ContentStart: Location{ByteOffset: 0xcda, LineNumber: 0x4c, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xcea, LineNumber: 0x4c, Column: 0x11}, End: Location{ByteOffset: 0xcf1, LineNumber: 0x4c, Column: 0x18}}}, SymbolInfo: []*Symbol(nil), Score: 6001, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xff, 0x3f, 0x7b, 0x2b, 0x9c, 0xf1, 0x39, 0xda}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 4783.614450145422, Debug: "", FileName: "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x28, 0x29, 0x20, 0x7b}, ContentStart: Location{ByteOffset: 0x5ca2, LineNumber: 0x212, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x5cbc, LineNumber: 0x212, Column: 0x1b}, End: Location{ByteOffset: 0x5cc3, LineNumber: 0x212, Column: 0x22}}}, SymbolInfo: []*Symbol(nil), Score: 4501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x55, 0x2d, 0xa3, 0x45, 0xb9, 0x9c, 0xe5, 0x70}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 793.2637735683294, Debug: "", FileName: "docs/ops.html", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x3c, 0x6c, 0x69, 0x3e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x69, 0x6f, 0x3a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x49, 0x2f, 0x4f, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x20, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x20, 0x69, 0x74, 0x20, 0x68, 0x61, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e}, ContentStart: Location{ByteOffset: 0x1971b, LineNumber: 0x553, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x197c1, LineNumber: 0x553, Column: 0xa7}, End: Location{ByteOffset: 0x197c8, LineNumber: 0x553, Column: 0xae}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x1d, 0xe2, 0x1a, 0x66, 0x24, 0xf4, 0x6a, 0x2a}, Language: "HTML", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 793.2180331452305, Debug: "", FileName: "docs/upgrade.html", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x3c, 0x6c, 0x69, 0x3e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x22, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x20, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x34, 0x29, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x2e, 0x20, 0x44, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x62, 0x75, 0x67, 0x2c, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x62, 0x72, 0x69, 0x65, 0x66, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x20, 0x3c, 0x2f, 0x6c, 0x69, 0x3e}, ContentStart: Location{ByteOffset: 0x2a9a3, LineNumber: 0x784, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x2aa76, LineNumber: 0x784, Column: 0xd4}, End: Location{ByteOffset: 0x2aa7d, LineNumber: 0x784, Column: 0xdb}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xcd, 0xd4, 0x9, 0x88, 0x24, 0xe, 0xce, 0xa2}, Language: "HTML", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 793.2104097413807, Debug: "", FileName: "docs/security.html", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x49, 0x66, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a}, ContentStart: Location{ByteOffset: 0x96c5, LineNumber: 0x1f5, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x9721, LineNumber: 0x1f5, Column: 0x5d}, End: Location{ByteOffset: 0x9728, LineNumber: 0x1f5, Column: 0x64}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}, ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x65, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x5a, 0x6f, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a}, ContentStart: Location{ByteOffset: 0x2787a, LineNumber: 0x8c6, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x27963, LineNumber: 0x8c6, Column: 0xea}, End: Location{ByteOffset: 0x2796a, LineNumber: 0x8c6, Column: 0xf1}}}, SymbolInfo: []*Symbol(nil), Score: 500.5, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x5a, 0xe4, 0xf0, 0x6, 0xeb, 0xac, 0xc1, 0x1d}, Language: "HTML", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 793.1513283615445, Debug: "", FileName: "docs/streams/index.html", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x38, 0x30, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x4c, 0x49, 0x4e, 0x45, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x20, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2c, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x20, 0x4c, 0x49, 0x4e, 0x45, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x75, 0x62, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x61, 0x73, 0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x3c, 0x2f, 0x70, 0x3e}, ContentStart: Location{ByteOffset: 0x27ea, LineNumber: 0x9d, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x2a40, LineNumber: 0x9d, Column: 0x257}, End: Location{ByteOffset: 0x2a47, LineNumber: 0x9d, Column: 0x25e}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x42, 0xc, 0xfa, 0x9b, 0x45, 0xd9, 0xf8, 0x80}, Language: "HTML", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 792.3222831928767, Debug: "", FileName: "clients/src/main/java/org/apache/kafka/common/KafkaFuture.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x7b, 0x40, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x6e, 0x2e, 0x20, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x22, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x22, 0x20, 0x7b, 0x40, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x7d, 0x2c}, ContentStart: Location{ByteOffset: 0x1232, LineNumber: 0x6c, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x1277, LineNumber: 0x6c, Column: 0x46}, End: Location{ByteOffset: 0x127e, LineNumber: 0x6c, Column: 0x4d}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x58, 0xb0, 0x7c, 0xf6, 0x15, 0x89, 0xfc, 0x67}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 791.4532151539973, Debug: "", FileName: "connect/api/src/main/java/org/apache/kafka/connect/connector/Task.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x2a, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e}, ContentStart: Location{ByteOffset: 0x4cc, LineNumber: 0x1d, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x4e6, LineNumber: 0x1d, Column: 0x1b}, End: Location{ByteOffset: 0x4ed, LineNumber: 0x1d, Column: 0x22}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xed, 0x13, 0xae, 0x11, 0xcf, 0x91, 0x8d, 0xab}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 790.265870004388, Debug: "", FileName: "storage/src/main/java/org/apache/kafka/storage/internals/log/AppendOrigin.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e}, ContentStart: Location{ByteOffset: 0x3d6, LineNumber: 0x18, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x42d, LineNumber: 0x18, Column: 0x58}, End: Location{ByteOffset: 0x434, LineNumber: 0x18, Column: 0x5f}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x48, 0xbf, 0x75, 0xcd, 0xf1, 0x6e, 0xc4, 0x49}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 790.2468114947635, Debug: "", FileName: "clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x2a, 0x20, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x61, 0x6e, 0x64}, ContentStart: Location{ByteOffset: 0x3bf, LineNumber: 0x18, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x3e8, LineNumber: 0x18, Column: 0x2a}, End: Location{ByteOffset: 0x3ef, LineNumber: 0x18, Column: 0x31}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xa8, 0x24, 0x41, 0x33, 0x30, 0xcb, 0xb1, 0x8f}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 789.4825652588191, Debug: "", FileName: "clients/src/main/java/org/apache/kafka/clients/consumer/internals/RequestState.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e}, ContentStart: Location{ByteOffset: 0x79d, LineNumber: 0x36, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x7c7, LineNumber: 0x36, Column: 0x2b}, End: Location{ByteOffset: 0x7ce, LineNumber: 0x36, Column: 0x32}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}, ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x74, 0x6f, 0x20, 0x30, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77}, ContentStart: Location{ByteOffset: 0xb6c, LineNumber: 0x55, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xb81, LineNumber: 0x55, Column: 0x16}, End: Location{ByteOffset: 0xb88, LineNumber: 0x55, Column: 0x1d}}}, SymbolInfo: []*Symbol(nil), Score: 500.5, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xc8, 0xb9, 0x93, 0x3a, 0xb, 0x7b, 0x76, 0xd9}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 788.4686525467932, Debug: "", FileName: "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x20, 0x77, 0x65, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74}, ContentStart: Location{ByteOffset: 0xdce1, LineNumber: 0x46b, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xdcfa, LineNumber: 0x46b, Column: 0x1a}, End: Location{ByteOffset: 0xdd01, LineNumber: 0x46b, Column: 0x21}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x9b, 0x90, 0x3f, 0x3c, 0x85, 0x98, 0x2, 0x4d}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 786.3988984015674, Debug: "", FileName: "core/src/test/scala/unit/kafka/tools/LineMessageReaderTest.scala", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x64, 0x65, 0x66, 0x20, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x3a, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x20, 0x3d, 0x20, 0x7b}, ContentStart: Location{ByteOffset: 0x782, LineNumber: 0x39, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x78c, LineNumber: 0x39, Column: 0xb}, End: Location{ByteOffset: 0x793, LineNumber: 0x39, Column: 0x12}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x4b, 0x50, 0x7b, 0x1b, 0xf3, 0x6a, 0xab, 0x4}, Language: "Scala", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 786.3321936178816, Debug: "", FileName: "clients/src/test/java/org/apache/kafka/common/KafkaFutureTest.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x46, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65}, ContentStart: Location{ByteOffset: 0x6e36, LineNumber: 0x26e, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x6e59, LineNumber: 0x26e, Column: 0x24}, End: Location{ByteOffset: 0x6e60, LineNumber: 0x26e, Column: 0x2b}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}, ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x3d, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x28, 0x22, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x29, 0x3b}, ContentStart: Location{ByteOffset: 0x6ea6, LineNumber: 0x26f, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x6eb9, LineNumber: 0x26f, Column: 0x14}, End: Location{ByteOffset: 0x6ec0, LineNumber: 0x26f, Column: 0x1b}}, Range{Start: Location{ByteOffset: 0x6eee, LineNumber: 0x26f, Column: 0x49}, End: Location{ByteOffset: 0x6ef5, LineNumber: 0x26f, Column: 0x50}}}, SymbolInfo: []*Symbol(nil), Score: 500.6666666666667, DebugScore: ""}, ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x20, 0x63, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x29, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x28, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x66, 0x75, 0x74, 0x29, 0x3b}, ContentStart: Location{ByteOffset: 0x6f08, LineNumber: 0x270, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0x6f59, LineNumber: 0x270, Column: 0x52}, End: Location{ByteOffset: 0x6f60, LineNumber: 0x270, Column: 0x59}}}, SymbolInfo: []*Symbol(nil), Score: 500.3333333333333, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xab, 0xa1, 0x12, 0xf3, 0xd2, 0x12, 0x26, 0x6a}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 784.3958490400275, Debug: "", FileName: "streams/test-utils/src/main/java/org/apache/kafka/streams/processor/MockProcessorContext.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x2a, 0x20, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x7b, 0x40, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2d, 0x73, 0x69, 0x6e, 0x6b}, ContentStart: Location{ByteOffset: 0x9fc, LineNumber: 0x38, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xa56, LineNumber: 0x38, Column: 0x5b}, End: Location{ByteOffset: 0xa5d, LineNumber: 0x38, Column: 0x62}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0xd1, 0x76, 0x9b, 0x45, 0xf0, 0x28, 0xfe, 0x92}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 784.3081798957546, Debug: "", FileName: "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/ConnectRestServerTest.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x20, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x28, 0x29, 0x3b}, ContentStart: Location{ByteOffset: 0xbe4, LineNumber: 0x4f, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xc0b, LineNumber: 0x4f, Column: 0x28}, End: Location{ByteOffset: 0xc12, LineNumber: 0x4f, Column: 0x2f}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x8e, 0xf6, 0x17, 0x24, 0xbf, 0x32, 0x49, 0x82}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}, FileMatch{Score: 784.0756660783351, Debug: "", FileName: "streams/test-utils/src/main/java/org/apache/kafka/streams/processor/api/MockProcessorContext.java", Repository: "github.com/apache/kafka", Branches: []string{"HEAD"}, LineMatches: []LineMatch(nil), ChunkMatches: []ChunkMatch{ChunkMatch{Content: []uint8{0x20, 0x2a, 0x20, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x7b, 0x40, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2d, 0x73, 0x69, 0x6e, 0x6b}, ContentStart: Location{ByteOffset: 0xc24, LineNumber: 0x43, Column: 0x1}, FileName: false, Ranges: []Range{Range{Start: Location{ByteOffset: 0xc7e, LineNumber: 0x43, Column: 0x5b}, End: Location{ByteOffset: 0xc85, LineNumber: 0x43, Column: 0x62}}}, SymbolInfo: []*Symbol(nil), Score: 501, DebugScore: ""}}, RepositoryID: 0x4, RepositoryPriority: 24620, Content: []uint8(nil), Checksum: []uint8{0x96, 0xa8, 0x6f, 0x31, 0x3, 0x9a, 0x73, 0x9e}, Language: "Java", SubRepositoryName: "", SubRepositoryPath: "", Version: "e1e3900ba1980ca774b927df4a8713a0328eeb86"}}, RepoURLs: map[string]string{"github.com/apache/kafka": ""}, LineFragments: map[string]string{"github.com/apache/kafka": ""}}

var exampleProtoSearchResult = exampleSearchResult.ToProto()

const count = 10000

func BenchmarkGobRoundtrip(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var buf bytes.Buffer
		enc := gob.NewEncoder(&buf)

		for i := 0; i < count; i++ {
			err := enc.Encode(exampleSearchResult)
			if err != nil {
				panic(err)
			}

		}

		dec := gob.NewDecoder(&buf)
		for i := 0; i < count; i++ {
			var res SearchResult
			err := dec.Decode(&res)
			if err != nil {
				panic(err)
			}
		}
	}
}

func BenchmarkProtoRoundtrip(b *testing.B) {
	res := new(v1.SearchResponse)
	for i := 0; i < b.N; i++ {
		for i := 0; i < count; i++ {
			b, err := proto.Marshal(exampleProtoSearchResult)
			if err != nil {
				panic(err)
			}
			err = proto.Unmarshal(b, res)
			if err != nil {
				panic(err)
			}
		}
	}
}
